name: Deploy feature-monitor to NCP

  # 'feature/monitor' 브랜치에 push가 발생할 때 워크플로우 실행
on:
  push:
    branches:
      - feature/monitor # 여기에 감지할 브랜치 이름을 명시합니다.

jobs:
  build-and-deploy-feature-monitor: # 잡 이름을 구분하는 것이 좋습니다.
    runs-on: ubuntu-latest
    env:
      NCP_CONTAINER_REGISTRY: ${{ secrets.NCP_CONTAINER_REGISTRY_URL }}
      #NCP_REPOSITORY_NAME: ${{ secrets.NCP_REPOSITORY_NAME }}
      # 이미지 이름에 브랜치명을 포함하여 다른 배포와 구분합니다.
      #IMAGE_NAME: ${{ secrets.NCP_CONTAINER_REGISTRY_URL }}/${{ secrets.NCP_REPOSITORY_NAME }}/${{ github.event.repository.name }}
      IMAGE_TAG: feature-monitor # 이 브랜치 전용 태그 (또는 github.sha 사용 가능)
      # 컨테이너 이름도 다른 배포와 충돌하지 않도록 브랜치명을 포함합니다.
      CONTAINER_NAME: my-app-container-feature-monitor

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # 자동으로 push된 브랜치(feature/monitor)의 코드를 체크아웃합니다.

      - name: Set lowercase names
        run: |
          echo "LOWERCASE_GITHUB_REPO_NAME=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
            

      - name: Define Image Name
        run: |
          echo "IMAGE_NAME=${{ env.NCP_CONTAINER_REGISTRY }}/${{ secrets.NCP_REPOSITORY_NAME }}/${{ env.LOWERCASE_GITHUB_REPO_NAME }}" >> $GITHUB_ENV  

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to NCP Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.NCP_CONTAINER_REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile # Dockerfile 경로
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}-${{ github.sha }} # Commit SHA로도 태깅

      - name: Deploy to NCP Server (feature-monitor)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_SERVER_HOST }} # feature/monitor 배포용 서버가 다르다면 별도 Secret 사용
          username: ${{ secrets.NCP_SERVER_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          script: |
            echo "Logging into NCP Container Registry on server..."
            docker login -u ${{ secrets.NCP_ACCESS_KEY }} -p ${{ secrets.NCP_SECRET_KEY }} ${{ env.NCP_CONTAINER_REGISTRY }}
              
            echo "Pulling image for feature/monitor branch..."
            docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
              
            echo "Stopping and removing existing feature/monitor container (if any)..."
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
              
            echo "Running new feature/monitor container..."
            # feature/monitor 브랜치 배포용 포트, 환경변수 등을 다르게 설정할 수 있습니다.
            # 예: 다른 포트(8081) 사용, 개발 환경 변수 설정
            docker run -d -p 8081:3000 --name ${{ env.CONTAINER_NAME }} \
              -e NODE_ENV=development \
              -e BRANCH_NAME=feature-monitor \
              ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
              
            echo "Cleaning up old images..."
            docker image prune -af